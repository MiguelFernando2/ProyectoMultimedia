/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package iterfaz;

import java.util.List;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javax.swing.JFileChooser;
import javafx.scene.media.MediaView;
import javafx.stage.Stage;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DIEGO
 */
public class videos extends javax.swing.JFrame {
    private MediaView mediaView;

    /**
     * Creates new form videos
     */
    public videos() {
        this.setSize(1475, 610);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null); 
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        menu = new javax.swing.JTable();
        mostrarvideo = new javax.swing.JLabel();
        Reproducir = new javax.swing.JButton();
        Pausar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        abrirDuplicado = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        mostrarArchivosMasGrandes = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        tamañototal = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldBusqueda = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        buscarVideos = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        moverVideo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/VIDEOSS.png"))); // NOI18N
        jLabel2.setText("jLabel2");

        menu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Extencion", "Artista", "Album", "Genero", "Duracion", "Año", "Ruta", "Tamaño MB"
            }
        ));
        jScrollPane1.setViewportView(menu);

        mostrarvideo.setText("                                                                                 VIDEO");

        Reproducir.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        Reproducir.setText("REPRODUCIR");
        Reproducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReproducirActionPerformed(evt);
            }
        });

        Pausar.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        Pausar.setText("PAUSAR");
        Pausar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PausarActionPerformed(evt);
            }
        });

        abrirDuplicado.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        abrirDuplicado.setText("DUPLICADOS");
        abrirDuplicado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirDuplicadoActionPerformed(evt);
            }
        });

        jLabel6.setText("MOSTRAR ARCHIVOS GRANDES");

        mostrarArchivosMasGrandes.setText("MOSTRAR");
        mostrarArchivosMasGrandes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarArchivosMasGrandesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(mostrarArchivosMasGrandes, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mostrarArchivosMasGrandes, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(abrirDuplicado, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(abrirDuplicado, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        tamañototal.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        tamañototal.setText("CALCULAR TAMAÑO:");
        tamañototal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamañototalActionPerformed(evt);
            }
        });

        jTextField1.setText(" 0.00");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel3.setText("TAMAÑO:");

        jLabel4.setText("MB");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(tamañototal, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tamañototal, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel1.setText("    BUSQUEDA DE ARCHIVO POR NOMBRE, ARTISTA O ALBUM");

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel5.setText("INGRESE SU BUSQUEDA");

        jTextFieldBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBusquedaActionPerformed(evt);
            }
        });

        buscar.setText("BUSCAR");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldBusqueda)
                    .addComponent(buscar, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        eliminar.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        eliminar.setText("ELIMINAR");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        buscarVideos.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        buscarVideos.setText("BUSCAR VIDEOS");
        buscarVideos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarVideosActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        jButton2.setText("REGRESAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        jButton1.setText("PRINCIPAL");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        moverVideo.setText("MOVER VIDEO");
        moverVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moverVideoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buscarVideos, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .addComponent(moverVideo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buscarVideos, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moverVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(128, 128, 128))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Reproducir, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Pausar, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(mostrarvideo, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mostrarvideo, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(eliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                            .addComponent(Reproducir, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                            .addComponent(Pausar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ReproducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReproducirActionPerformed
    DefaultTableModel model = (DefaultTableModel) menu.getModel();
    
    // Obtener la fila seleccionada
    int selectedRow = menu.getSelectedRow();
    if (selectedRow != -1) { // Verificar que hay una fila seleccionada
        // Obtener la ruta del video de la columna correspondiente
        String videoPath = (String) model.getValueAt(selectedRow, 7); // Suponiendo que la ruta está en la columna 7

        // Mostrar el nombre del video en el JLabel
        mostrarvideo.setText("Reproduciendo: " + new File(videoPath).getName());

        // Llamar a un método para reproducir el video
        reproducirVideo(videoPath);
    } else {
        // Mostrar mensaje de advertencia si no hay fila seleccionada
        JOptionPane.showMessageDialog(this, "Por favor, selecciona un video para reproducir.", "Advertencia", JOptionPane.WARNING_MESSAGE);
    }
}

// Método para reproducir el video
private void reproducirVideo(String videoPath) {
    // Iniciar un nuevo hilo para evitar bloquear la interfaz de usuario
    new Thread(() -> {
        try {
            // Crear el objeto Media y MediaPlayer
            Media media = new Media(new File(videoPath).toURI().toString());
            MediaPlayer mediaPlayer = new MediaPlayer(media);
            MediaView mediaView = new MediaView(mediaPlayer);

            // Crear un nuevo Stage para el video
            Platform.runLater(() -> {
                Stage videoStage = new Stage();
                videoStage.setTitle("Reproduciendo video");
                Scene scene = new Scene(new StackPane(mediaView), 800, 600); // Ajusta el tamaño según sea necesario
                videoStage.setScene(scene);
                videoStage.show(); // Hacer visible el Stage

                // Iniciar la reproducción del video
                mediaPlayer.play(); 

                // Opcional: Puedes agregar un listener para cerrar el Stage al terminar el video
                mediaPlayer.setOnEndOfMedia(() -> {
                    videoStage.close(); // Cerrar el Stage
                });
                
                // Opcional: Manejar el cierre del Stage
                videoStage.setOnCloseRequest(event -> {
                    mediaPlayer.stop(); // Detener el video al cerrar el Stage
                });
            });
        } catch (Exception e) {
            // Manejo de excepciones
            Platform.runLater(() -> {
                JOptionPane.showMessageDialog(this, "Error al reproducir el video: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            });
        }
    }).start(); // Iniciar el hilo
    }//GEN-LAST:event_ReproducirActionPerformed

    private void PausarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PausarActionPerformed

    }//GEN-LAST:event_PausarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        DefaultTableModel model = (DefaultTableModel) menu.getModel();

    // Verifica si hay filas en la tabla
    if (model.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "La tabla está vacía.");
        return; // Salir si no hay datos
    }

    // Obtiene la fila seleccionada
    int filaSeleccionada = menu.getSelectedRow(); // Obtén el índice de la fila seleccionada

    // Verifica si se ha seleccionado una fila
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione un archivo para eliminar.");
        return; // Salir si no se seleccionó nada
    }

    String rutaArchivo = (String) model.getValueAt(filaSeleccionada, 7); // Suponiendo que la ruta está en la columna 7

    // Confirmación antes de eliminar
    int respuesta = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar el archivo: " + rutaArchivo + "?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);
    
    // Si la respuesta es sí, procede a eliminar el archivo
    if (respuesta == JOptionPane.YES_OPTION) {
        File archivoAEliminar = new File(rutaArchivo);
        
        // Intentar eliminar el archivo del sistema de archivos
        if (archivoAEliminar.exists() && archivoAEliminar.delete()) { // Verifica que el archivo existe antes de eliminarlo
            model.removeRow(filaSeleccionada); // Eliminar la fila de la tabla
            JOptionPane.showMessageDialog(this, "El archivo ha sido eliminado permanentemente.");
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo eliminar el archivo. Asegúrese de que no esté en uso y que la ruta sea correcta.");
        }
    }   
    }//GEN-LAST:event_eliminarActionPerformed

    private void abrirDuplicadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirDuplicadoActionPerformed
        DefaultTableModel model = (DefaultTableModel) menu.getModel();
    
    // Verifica si hay filas en la tabla
    if (model.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "No hay archivos duplicados para mostrar.");
        return; // Salir si no hay datos
    }

    // Crear un mapa para guardar los nombres y sus rutas
    Map<String, List<String[]>> archivos = new HashMap<>(); 

    // Recopilar las rutas de los archivos
    for (int i = 0; i < model.getRowCount(); i++) {
        String nombreArchivo = (String) model.getValueAt(i, 0); // Nombre en la columna 0
        String rutaArchivo = (String) model.getValueAt(i, 7); // Ruta en la columna 7
        
        // Normalizamos el nombre de archivo
        if (nombreArchivo != null && !nombreArchivo.trim().isEmpty() && rutaArchivo != null && !rutaArchivo.trim().isEmpty()) {
            nombreArchivo = nombreArchivo.trim().toLowerCase();
            rutaArchivo = rutaArchivo.trim();

            // Agregar la ruta al mapa
            archivos.putIfAbsent(nombreArchivo, new ArrayList<>());
            archivos.get(nombreArchivo).add(new String[] {
                (String) model.getValueAt(i, 0), // Nombre
                (String) model.getValueAt(i, 1), // Extensión
                (String) model.getValueAt(i, 2), // Artista
                (String) model.getValueAt(i, 3), // Álbum
                (String) model.getValueAt(i, 4), // Género
                (String) model.getValueAt(i, 5), // Duración
                (String) model.getValueAt(i, 6), // Año
                rutaArchivo, // Ruta
                (String) model.getValueAt(i, 8)  // Tamaño
            });
        }
    }

    // Lista para almacenar los duplicados
    List<String[]> archivosDuplicados = new ArrayList<>();

    // Verificar duplicados
    for (int i = 0; i < new ArrayList<>(archivos.entrySet()).size(); i++) {
        Map.Entry<String, List<String[]>> entry = new ArrayList<>(archivos.entrySet()).get(i);
        
        if (entry.getValue().size() > 1) { // Si hay más de un archivo con el mismo nombre
            archivosDuplicados.addAll(entry.getValue()); // Añadir todos los duplicados a la lista
        }
    }

    model.setRowCount(0); // Limpiar todas las filas del JTable

    // Agregar los archivos duplicados al modelo de la tabla
    if (archivosDuplicados.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No se encontraron archivos duplicados.");
    } else {
        for (String[] archivo : archivosDuplicados) {
            model.addRow(archivo); // Agregar cada fila de archivo duplicado a la tabla
        }
        JOptionPane.showMessageDialog(this, "Se encontraron " + archivosDuplicados.size() + " archivos duplicados.");
    }
    }//GEN-LAST:event_abrirDuplicadoActionPerformed

    private void tamañototalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tamañototalActionPerformed
    DefaultTableModel model = (DefaultTableModel) menu.getModel(); // Obtiene el modelo de la tabla
    double tamañoTotal = 0;

    // Iterar sobre las filas del modelo de la tabla
    for (int i = 0; i < model.getRowCount(); i++) {
        String tamañoStr = (String) model.getValueAt(i, 8); // La columna de tamaño está en el índice 8
        double tamañoMB = Double.parseDouble(tamañoStr); // Convertir a double
        tamañoTotal += tamañoMB; // Sumar al total
    }

    // Mostrar el tamaño total
        jTextField1.setText(String.format("%.2f MB", tamañoTotal));  
    }//GEN-LAST:event_tamañototalActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextFieldBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBusquedaActionPerformed
        buscarActionPerformed(evt);
    }//GEN-LAST:event_jTextFieldBusquedaActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        String textoBuscado = jTextFieldBusqueda.getText().toLowerCase();
    DefaultTableModel modeloTabla = (DefaultTableModel) menu.getModel(); // Obtiene el modelo de tu tabla
    modeloTabla.setRowCount(0); // Limpiar tabla antes de mostrar resultados

    // Verifica si hay datos originales
    if (datosOriginales.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No hay datos para buscar.");
        return; // Salir si no hay datos
    }

    // Usar un conjunto para almacenar rutas únicas y evitar duplicados
    Set<String> rutasUnicas = new HashSet<>();

    // Lista para almacenar los archivos encontrados
    List<String[]> archivosEncontrados = new ArrayList<>();

    // Recorrer los datos originales y filtrar coincidencias
    for (int i = 0; i < datosOriginales.size(); i++) {
        String[] archivo = datosOriginales.get(i);
        String nombreArchivo = archivo[0]; // Nombre en la columna 0
        String artista = archivo[2]; // Artista en la columna 2
        String album = archivo[3]; // Álbum en la columna 3
        String rutaArchivo = archivo[7]; // Ruta en la columna 7
        String duracion = archivo[5]; // Duración en la columna 5
        String año = archivo[6]; // Año en la columna 6
        String extension = getFileExtension(new File(rutaArchivo)); // Obtener extensión del archivo

        // Comprobar si hay coincidencias
        if (nombreArchivo.toLowerCase().contains(textoBuscado) ||
            artista.toLowerCase().contains(textoBuscado) ||
            album.toLowerCase().contains(textoBuscado)) {

            // Verificar si la ruta ya se ha agregado
            if (rutasUnicas.add(rutaArchivo)) { // add() devuelve false si el elemento ya existe
                archivosEncontrados.add(new String[]{nombreArchivo, extension, artista, album, "Desconocido", duracion, año, rutaArchivo}); // Agregar archivo encontrado a la lista
            }
        }
    }

    // Agregar los archivos encontrados al modelo de la tabla
    if (archivosEncontrados.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No se encontraron resultados para: " + textoBuscado);
    } else {
        for (int i = 0; i < archivosEncontrados.size(); i++) {
            String[] archivo = archivosEncontrados.get(i);
            modeloTabla.addRow(archivo); // Agregar cada fila de archivo encontrado a la tabla
        }
        JOptionPane.showMessageDialog(this, "Se encontraron " + archivosEncontrados.size() + " archivos.");
    }
    }//GEN-LAST:event_buscarActionPerformed
    private final List<String[]> datosOriginales = new ArrayList<>();
    private List<String> fileNames = new ArrayList<>(); // Inicializa la lista para los nombres de archivos
    private List<String> duplicateFiles = new ArrayList<>(); 
    private void buscarVideosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarVideosActionPerformed
        JFileChooser fileChooser = new JFileChooser();
    fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

    int result = fileChooser.showOpenDialog(this);
    if (result == JFileChooser.APPROVE_OPTION) {
        File folder = fileChooser.getSelectedFile();
        
        // Llama al método recursivo para buscar videos
        List<File> listOfFiles = buscarVideosRecursivamente(folder);

        // Inicializa el modelo de la tabla
        DefaultTableModel model = new DefaultTableModel(new String[]{"Nombre", "Extensión", "Artista", "Álbum", "Género", "Duración", "Año", "Ruta", "Tamaño MB"}, 0);
        menu.setModel(model);
        
        // Limpiar listas y el modelo de la tabla
        fileNames.clear(); 
        duplicateFiles.clear(); 
        datosOriginales.clear(); 

        // Agregar archivos encontrados a la tabla
        if (listOfFiles != null) {
            for (File file : listOfFiles) {
                if (file.isFile()) {
                    agregarArchivoATabla(model, file);
                }
            }
        }

        // Opcional: Muestra el número de archivos encontrados
        JOptionPane.showMessageDialog(this, "Se encontraron " + listOfFiles.size() + " archivos de video.", "Resultados de Búsqueda", JOptionPane.INFORMATION_MESSAGE);
    }
}

// Método para agregar un archivo al modelo de la tabla
private void agregarArchivoATabla(DefaultTableModel model, File file) {
    String nombre = file.getName();
    String extension = getFileExtension(file);
    String artista = "Desconocido";
    String album = "Desconocido";
    String genero = "Desconocido";
    String duracion = obtenerDuracionSimulada(file); // Método simulado para duración
    String año = "Desconocido"; // Ajusta según tus necesidades
    String ruta = file.getAbsolutePath();
    double tamañoMB = file.length() / (1024.0 * 1024.0); // Convertir tamaño a MB

    // Comprobar duplicados
    if (fileNames.contains(nombre)) {
        duplicateFiles.add(nombre);
    } else {
        fileNames.add(nombre);
    }

    // Agregar fila al modelo de la tabla
    String[] fila = new String[]{
        nombre, extension, artista, album, genero, duracion, año, ruta, String.format("%.2f", tamañoMB)
    };
    model.addRow(fila);
    datosOriginales.add(fila);
}

// Método para buscar videos recursivamente
private List<File> buscarVideosRecursivamente(File carpeta) {
    List<File> archivosVideos = new ArrayList<>(); 
    
    // Obtener todos los archivos en la carpeta
    File[] archivos = carpeta.listFiles(); 
    if (archivos != null) {
        for (File archivo : archivos) {
            if (archivo.isDirectory()) {
                // Llamada recursiva para buscar en subcarpetas
                archivosVideos.addAll(buscarVideosRecursivamente(archivo)); 
            } else if (archivo.isFile() && 
                       (archivo.getName().endsWith(".mp4") || archivo.getName().endsWith(".flv"))) { 
                // Solo incluye archivos de video MP4 y FLV
                archivosVideos.add(archivo);
            }
        }
    }
    
    return archivosVideos; 
}

// Método para obtener la extensión del archivo
private String getFileExtension(File file) {
    String name = file.getName();
    int lastIndexOf = name.lastIndexOf(".");
    return lastIndexOf == -1 ? "" : name.substring(lastIndexOf + 1).toLowerCase(); // Asegúrate de que la extensión esté en minúsculas
}

// Método simulado para obtener la duración del video
private String obtenerDuracionSimulada(File file) {
    // Simularemos una duración aleatoria entre 1 y 300 segundos (0 a 5 minutos)
    int segundosSimulados = (int) (Math.random() * 300 + 1);
    return formatDuration(segundosSimulados);
}

// Método para formatear la duración
private String formatDuration(int seconds) {
    int minutes = seconds / 60;
    int remainingSeconds = seconds % 60;
    return String.format("%02d:%02d", minutes, remainingSeconds);

    }//GEN-LAST:event_buscarVideosActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Pantalla pantalla = new Pantalla();
        pantalla.setVisible(true); // Hacer visible la ventana Pantalla
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    DefaultTableModel model = (DefaultTableModel) menu.getModel();
    model.setRowCount(0); // Limpia todas las filas

    // Vuelve a llenar la tabla con datos originales
    for (int i = 0; i < datosOriginales.size(); i++) {
        String[] fila = datosOriginales.get(i);
        model.addRow(fila); // Agrega las filas originales a la tabla
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void mostrarArchivosMasGrandesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarArchivosMasGrandesActionPerformed
    List<File> archivosGrandes = new ArrayList<>();
        for (int i = 0; i < datosOriginales.size(); i++) {
            String[] fila = datosOriginales.get(i);
    
    // Usamos el nombre de archivo para buscar el archivo en el sistema
    File file = new File(fila[7]); // La ruta está en la posición 7
    
    if (file.exists() && (file.getName().endsWith(".mp4") || file.getName().endsWith(".flv"))) {
        archivosGrandes.add(file);
    }
}

    // Ordenar los archivos por tamaño de forma descendente
    archivosGrandes.sort((f1, f2) -> Long.compare(f2.length(), f1.length()));

    // Limitar a los primeros 10 archivos
    List<File> top10Archivos = archivosGrandes.stream().limit(10).collect(Collectors.toList());

    // Actualizar la tabla con los archivos más grandes
    DefaultTableModel model = new DefaultTableModel(new String[]{"Nombre", "Extensión", "Artista", "Álbum", "Género", "Duración", "Año", "Ruta", "Tamaño MB"}, 0);
    for (int i = 0; i < top10Archivos.size(); i++) {
        File file = top10Archivos.get(i);
        String nombre = file.getName();
        String extension = getFileExtension(file);
        String artista = "Desconocido";  
        String album = "Desconocido";     
        String genero = "Desconocido";    
        String duracion = obtenerDuracionSimulada(file); 
        String año = "Desconocido";       
        String ruta = file.getAbsolutePath();
        long tamaño = file.length();
        double tamañoMB = tamaño / (1024.0 * 1024.0); 

    // Agregar fila al modelo de la tabla
    String[] fila = new String[]{
        nombre, extension, artista, album, genero, duracion, año, ruta, String.format("%.2f", tamañoMB)
    };
    model.addRow(fila);
}

    menu.setModel(model);
    }//GEN-LAST:event_mostrarArchivosMasGrandesActionPerformed

    private void moverVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moverVideoActionPerformed
    int filaSeleccionada = menu.getSelectedRow(); // Obtener la fila seleccionada

    // Verificar si se seleccionó una fila
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Por favor, selecciona un video de la tabla.");
        return; // Salir si no hay selección
    }
    
    // Obtener la ruta del archivo de la columna correspondiente (en este caso, la columna 7 que contiene la ruta)
    String rutaVideo = (String) menu.getValueAt(filaSeleccionada, 7); // La columna de la ruta es la 7

    // Crear un objeto File para el video seleccionado
    File videoSeleccionado = new File(rutaVideo);
    
    // Verificar si el archivo existe
    if (!videoSeleccionado.exists()) {
        JOptionPane.showMessageDialog(this, "El video seleccionado no existe en la ruta: " + rutaVideo);
        return;
    }
    
    // Mostrar un JFileChooser para seleccionar la carpeta de destino
    JFileChooser carpetaChooser = new JFileChooser();
    carpetaChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    int resultadoCarpeta = carpetaChooser.showOpenDialog(this);
    
    // Si se selecciona una carpeta
    if (resultadoCarpeta == JFileChooser.APPROVE_OPTION) {
        File carpetaDestino = carpetaChooser.getSelectedFile();
        File videoDestino = new File(carpetaDestino, videoSeleccionado.getName());
        
        // Verificar si el archivo destino ya existe
        if (videoDestino.exists()) {
            JOptionPane.showMessageDialog(this, "Ya existe un video con el mismo nombre en la carpeta de destino.");
            return;
        }
        
            try {
                // Mover el video
                Files.move(videoSeleccionado.toPath(), videoDestino.toPath());
            } catch (IOException ex) {
                Logger.getLogger(videos.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(this, "Video movido con éxito a: " + videoDestino.getAbsolutePath());
    }     
    }//GEN-LAST:event_moverVideoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(videos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(videos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(videos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(videos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new videos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Pausar;
    private javax.swing.JButton Reproducir;
    private javax.swing.JButton abrirDuplicado;
    private javax.swing.JButton buscar;
    private javax.swing.JButton buscarVideos;
    private javax.swing.JButton eliminar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextFieldBusqueda;
    private javax.swing.JTable menu;
    private javax.swing.JButton mostrarArchivosMasGrandes;
    private javax.swing.JLabel mostrarvideo;
    private javax.swing.JButton moverVideo;
    private javax.swing.JButton tamañototal;
    // End of variables declaration//GEN-END:variables

    private String obtenerExtension(String videoPath) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
