/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package iterfaz;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DIEGO
 */
public class imagenes extends javax.swing.JFrame {

    /**
     * Creates new form imagenes
     */
    public imagenes() {
        this.setSize(1370, 662);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTableMenu = new javax.swing.JTable();
        imagenes = new javax.swing.JButton();
        atras = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        mostrarImagen = new javax.swing.JLabel();
        abrir = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldBusqueda = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        atras1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        tamañototal = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        eliminar = new javax.swing.JButton();
        abrirDuplicado = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        mostrarArchivosMasGrandes2 = new javax.swing.JButton();
        moverImagen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Sin título_1.png"))); // NOI18N
        jLabel2.setText("jLabel2");

        JTableMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Extencion", "Ruta", "Fecha de creacion", "Fecha de modificacion", "Tamaño MB", "Nombre del aparato", "Modelo del aparato"
            }
        ));
        jScrollPane1.setViewportView(JTableMenu);

        imagenes.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        imagenes.setText("BUSCAR  IMAGENES");
        imagenes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imagenesActionPerformed(evt);
            }
        });

        atras.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        atras.setText("PRINCIPAL");
        atras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atrasActionPerformed(evt);
            }
        });

        mostrarImagen.setText("                              IMAGEN");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mostrarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(mostrarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        abrir.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        abrir.setText("ABRIR IMAGEN");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel1.setText("    BUSQUEDA DE ARCHIVO POR NOMBRE, ARTISTA O ALBUM");

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel5.setText("INGRESE SU BUSQUEDA");

        jTextFieldBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBusquedaActionPerformed(evt);
            }
        });

        buscar.setText("BUSCAR");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldBusqueda)
                    .addComponent(buscar, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        atras1.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        atras1.setText("REGRESAR");
        atras1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atras1ActionPerformed(evt);
            }
        });

        tamañototal.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        tamañototal.setText("CALCULAR TAMAÑO:");
        tamañototal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamañototalActionPerformed(evt);
            }
        });

        jTextField1.setText(" 0.00");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel3.setText("TAMAÑO:");

        jLabel4.setText("MB");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(tamañototal, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tamañototal, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        eliminar.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        eliminar.setText("ELIMINAR");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        abrirDuplicado.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        abrirDuplicado.setText("DUPLICADOS");
        abrirDuplicado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirDuplicadoActionPerformed(evt);
            }
        });

        jLabel8.setText("   ARCHIVOS GRANDES");

        mostrarArchivosMasGrandes2.setText("MOSTRAR");
        mostrarArchivosMasGrandes2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarArchivosMasGrandes2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(abrirDuplicado, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mostrarArchivosMasGrandes2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(abrirDuplicado, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mostrarArchivosMasGrandes2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        moverImagen.setText("MOVER IMAGEN");
        moverImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moverImagenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(atras, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                                    .addComponent(atras1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(imagenes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 737, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 966, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(abrir, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moverImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(atras, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(atras1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imagenes, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(35, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(abrir, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(moverImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(158, 158, 158))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private final List<String[]> datosOriginales = new ArrayList<>();
    private final List<String> fileNames = new ArrayList<>(); // Para rastrear nombres de archivos
    private final List<String> duplicateFiles = new ArrayList<>(); // Para duplicados
    
    private void imagenesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imagenesActionPerformed
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    int resultado;

    resultado = fileChooser.showOpenDialog(this);
    if (resultado == JFileChooser.APPROVE_OPTION) {
        File folder = fileChooser.getSelectedFile();
        List<File> listaArchivo = buscarImagenesRecursivamente(folder);
        
        DefaultTableModel model = new DefaultTableModel(new String[]{
            "Nombre", "Extensión", "Ruta", "Fecha de creación", 
            "Fecha de modificación", "Tamaño MB", 
            "Nombre del aparato", "Modelo del aparato"}, 0);
        JTableMenu.setModel(model); // Establecer el modelo

        fileNames.clear();
        duplicateFiles.clear();
        datosOriginales.clear(); // Limpiar antes de agregar nuevos datos

        if (listaArchivo != null && !listaArchivo.isEmpty()) {
            System.out.println("Se encontraron los siguientes archivos:");
            System.out.println("Total de imágenes encontradas: " + listaArchivo.size()); // Mensaje de depuración
            
            for (int i = 0; i < listaArchivo.size(); i++) {
                File file = listaArchivo.get(i); // Obtener el archivo en la posición i
                String[] fila = new String[8]; // Crear un arreglo para la fila
                fila[0] = file.getName(); // Nombre
                fila[1] = getFileExtension(file); // Extensión
                fila[2] = file.getAbsolutePath(); // Ruta
                
                if (file.exists() && file.canRead()) {
                    BasicFileAttributes attrs = null;
                    try {
                        attrs = Files.readAttributes(file.toPath(), BasicFileAttributes.class);
                    } catch (IOException e) {
                    // Manejo alternativo si ocurre una excepción
                    System.out.println("No se pudieron leer los atributos del archivo: " + file.getName());
                    }
                    if (attrs != null) {
                        fila[3] = attrs.creationTime().toString(); // Fecha de creación
                        fila[4] = attrs.lastModifiedTime().toString(); // Fecha de modificación
                        fila[5] = String.format("%.2f", file.length() / (1024.0 * 1024.0)); // Tamaño en MB
                    } else {
                        fila[3] = "Desconocido"; // Valor por defecto si no se pueden leer los atributos
                        fila[4] = "Desconocido";
                        fila[5] = "0.00"; // Tamaño en MB por defecto
                    }
                } 
                else{
        // Si el archivo no es legible, asignar valores por defecto
                    fila[3] = "Desconocido"; // Fecha de creación
                    fila[4] = "Desconocido"; // Fecha de modificación
                    fila[5] = "0.00"; // Tamaño en MB por defecto
                    }
                    fila[6] = ""; // Nombre del aparato
                    fila[7] = ""; // Modelo del aparato
                    model.addRow(fila); // Agregar la fila al modelo
                    datosOriginales.add(fila); // Agregar fila a datosOriginales
                }
            // Aquí comienza la recolección de archivos grandes
                List<File> archivosGrandes = new ArrayList<>();
            
                for (int i = 0; i < listaArchivo.size(); i++) {
                    File file = listaArchivo.get(i); // Obtener el archivo en la posición i
                    if (file.length() > 1 * 1024 * 1024) { // Ajusta este tamaño según lo que consideres "grande"
                        archivosGrandes.add(file);
                    }
                }

            // Ordenar los archivos grandes por tamaño de forma descendente
                archivosGrandes.sort((f1, f2) -> Long.compare(f2.length(), f1.length()));
                List<File> top10Archivos = archivosGrandes.stream().limit(10).collect(Collectors.toList());

            // Agregar los archivos grandes al modelo
                for (int i = 0; i < top10Archivos.size(); i++) {
                    File file = top10Archivos.get(i); // Obtener el archivo en la posición i
                    String[] filaGrande = new String[8];
                    filaGrande[0] = file.getName(); // Nombre
                    filaGrande[1] = getFileExtension(file); // Extensión
                    filaGrande[2] = file.getAbsolutePath(); // Ruta
                    filaGrande[3] = ""; // Fecha de creación (puedes agregar lógica aquí)
                    filaGrande[4] = ""; // Fecha de modificación (puedes agregar lógica aquí)
                    filaGrande[5] = String.format("%.2f", file.length() / (1024.0 * 1024.0)); // Tamaño en MB
                    filaGrande[6] = ""; // Nombre del aparato
                    filaGrande[7] = ""; // Modelo del aparato
                
                    model.addRow(filaGrande); // Agregar fila del archivo grande al modelo
                }

                JTableMenu.revalidate(); // Asegúrate de que estos métodos se llaman después de modificar el modelo
                JTableMenu.repaint();
                } else {
                System.out.println("No se encontraron archivos de imagen en el directorio.");
            }
        }
    }
private List<File> buscarImagenesRecursivamente(File carpeta) {
    List<File> archivosImagenes = new ArrayList<>();

    File[] archivos = carpeta.listFiles();
    if (archivos != null) {
        for (int i = 0; i < archivos.length; i++) {
            File archivo = archivos[i]; // Acceder al archivo en la posición i
            if (archivo.isDirectory()) {
                archivosImagenes.addAll(buscarImagenesRecursivamente(archivo));
            } else if (archivo.isFile() && (archivo.getName().endsWith(".jpg") || 
                                            archivo.getName().endsWith(".jpeg") || 
                                            archivo.getName().endsWith(".png"))) {
                archivosImagenes.add(archivo);
            }
        }
    }

    return archivosImagenes;
}

private String getFileExtension(File file) {
    String name = file.getName();
    int lastIndexOfDot = name.lastIndexOf('.');
    return lastIndexOfDot == -1 ? "" : name.substring(lastIndexOfDot + 1);
    }//GEN-LAST:event_imagenesActionPerformed

    private void atrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atrasActionPerformed
    Pantalla pantalla = new Pantalla();
    pantalla.setVisible(true); // Hacer visible la ventana Pantalla
    // Cerrar la ventana actual
    this.dispose();
    }//GEN-LAST:event_atrasActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
    int seleccionado, labelWidth,labelHeight, newWidth, newHeight;
    double relacionAspecto;
    seleccionado = JTableMenu.getSelectedRow();
    
    // Comprobar si se ha seleccionado una fila
    if (seleccionado != -1) {
        // Obtener la ruta de la imagen desde la tabla
        String imagePath = (String) JTableMenu.getValueAt(seleccionado, 2); // Columna 2 tiene la ruta

        // Cargar la imagen
        ImageIcon icon = new ImageIcon(imagePath);
        Image originalImage = icon.getImage();
        
        // Obtener dimensiones del JLabel
        labelWidth = mostrarImagen.getWidth();
        labelHeight = mostrarImagen.getHeight();
        
        // Calcular la nueva dimensión manteniendo la proporción
        relacionAspecto = (double) originalImage.getWidth(null) / (double) originalImage.getHeight(null);
        
        if (labelWidth / labelHeight > relacionAspecto) {
            newWidth = (int) (labelHeight * relacionAspecto);
            newHeight = labelHeight;
        } else {
            newWidth = labelWidth;
            newHeight = (int) (labelWidth / relacionAspecto);
        }

        // Escalar la imagen
        Image scaledImage = originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
        
        // Establecer la imagen escalada en el JLabel
        mostrarImagen.setIcon(new ImageIcon(scaledImage));
    } else {
        // Mensaje de advertencia si no hay fila seleccionada
        javax.swing.JOptionPane.showMessageDialog(this, "Por favor, selecciona una imagen de la tabla.");
    }
    }//GEN-LAST:event_abrirActionPerformed

    private void jTextFieldBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBusquedaActionPerformed
        buscarActionPerformed(evt);
    }//GEN-LAST:event_jTextFieldBusquedaActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
    String  textoBuscado, nombreArchivo, extension,nombreAparato, modeloAparato ;
    textoBuscado = jTextFieldBusqueda.getText().toLowerCase();
    DefaultTableModel modeloTabla = (DefaultTableModel) JTableMenu.getModel(); // Obtiene el modelo de JTableMenu
    modeloTabla.setRowCount(0); // Limpiar tabla antes de mostrar resultados

    // Verifica si hay datos originales
    if (datosOriginales != null && datosOriginales.size() == 0) {
    JOptionPane.showMessageDialog(this, "No hay datos para buscar.");
    return; // Salir si no hay datos
}
    // Lista para almacenar las imágenes encontradas
    List<String[]> archivosEncontrados = new ArrayList<>();

    // Recorrer los datos originales y filtrar coincidencias
    for (int i = 0; i < datosOriginales.size(); i++) {
    String[] archivo = datosOriginales.get(i); // Obtener el arreglo en la posición i

    if (archivo.length >= 8) {
        nombreArchivo = archivo[0].toLowerCase(); // Nombre en la columna 0
        extension = archivo[1].toLowerCase(); // Extensión en la columna 1
        nombreAparato = archivo[6].toLowerCase(); // Nombre del aparato en la columna 6
        modeloAparato = archivo[7].toLowerCase(); // Modelo del aparato en la columna 7

        // Comprobar si hay coincidencias en los campos
        if (nombreArchivo.contains(textoBuscado) ||
            extension.contains(textoBuscado) ||
            nombreAparato.contains(textoBuscado) ||
            modeloAparato.contains(textoBuscado)) {
            archivosEncontrados.add(archivo); // Agregar archivo encontrado a la lista
        }
    }
}

    // Agregar los archivos encontrados al modelo de la tabla
    if (archivosEncontrados.size() == 0) { // Verificar si la lista está vacía usando size()
        JOptionPane.showMessageDialog(this, "No se encontraron resultados para: " + textoBuscado);
    } else {
        for (int i = 0; i < archivosEncontrados.size(); i++) {
            String[] archivo = archivosEncontrados.get(i); // Obtener el arreglo en la posición i
            modeloTabla.addRow(archivo); // Agregar cada fila de archivo encontrado a la tabla
        }
        JOptionPane.showMessageDialog(this, "Se encontraron " + archivosEncontrados.size() + " archivos.");
    }
    }//GEN-LAST:event_buscarActionPerformed

    private void atras1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atras1ActionPerformed
    DefaultTableModel model = (DefaultTableModel) JTableMenu.getModel();
    model.setRowCount(0); // Limpia todas las filas

    // Vuelve a llenar la tabla con datos originales
    for (int i = 0; i < datosOriginales.size(); i++) {
        String[] fila = datosOriginales.get(i); // Obtener la fila en la posición i
        model.addRow(fila); // Agregar la fila a la tabla
    }
    }//GEN-LAST:event_atras1ActionPerformed

    private void tamañototalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tamañototalActionPerformed
    DefaultTableModel model = (DefaultTableModel) JTableMenu.getModel(); // Obtiene el modelo de la tabla
    double tamañoTotal = 0;
    String tamañoStr;

    // Iterar sobre las filas del modelo de la tabla
    for (int i = 0; i < model.getRowCount(); i++) {
        tamañoStr = (String) model.getValueAt(i, 5); // La columna de tamaño está en el índice 5
        if (tamañoStr != null && tamañoStr.length() > 0) { // Comprobación para evitar valores nulos o vacíos
            Double tamañoMB = Double.valueOf(tamañoStr); // Convertir a double si es válido
            tamañoTotal += tamañoMB; // Sumar al total
        }
    }
    // Mostrar el tamaño total
    jTextField1.setText(String.format("%.2f MB", tamañoTotal));
    }//GEN-LAST:event_tamañototalActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
    DefaultTableModel model = (DefaultTableModel) JTableMenu.getModel();
    int filaSeleccionada, respuesta;
    String rutaArchivo;

    // Verifica si hay filas en la tabla
    if (model.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "La tabla está vacía.");
        return; // Salir si no hay datos
    }
    // Obtiene la fila seleccionada
    filaSeleccionada = JTableMenu.getSelectedRow(); // Obtén el índice de la fila seleccionada

    // Verifica si se ha seleccionado una fila
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione un archivo para eliminar.");
        return; // Salir si no se seleccionó nada
    }

    // Obtiene la ruta del archivo que se va a eliminar (cambiar índice a 2)
    rutaArchivo = (String) model.getValueAt(filaSeleccionada, 2); // Suponiendo que la ruta está en la columna 2

    // Confirmación antes de eliminar
    respuesta = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar el archivo: " + rutaArchivo + "?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);

    if (respuesta == JOptionPane.YES_OPTION) {
        File archivoAEliminar = new File(rutaArchivo);

        // Intentar eliminar el archivo del sistema de archivos
        if (archivoAEliminar.exists()) { // Verifica que el archivo existe antes de eliminarlo
            if (archivoAEliminar.delete()) { // Intenta eliminar el archivo
                model.removeRow(filaSeleccionada); // Eliminar la fila de la tabla
                JOptionPane.showMessageDialog(this, "El archivo ha sido eliminado permanentemente.");
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo eliminar el archivo. Asegúrese de que no esté en uso.");
            }} else {
            JOptionPane.showMessageDialog(this, "El archivo no existe. Verifique la ruta.");
        }
    }
    }//GEN-LAST:event_eliminarActionPerformed

    private void abrirDuplicadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirDuplicadoActionPerformed
    DefaultTableModel model = (DefaultTableModel) JTableMenu.getModel();
    String nombreArchivo, rutaArchivo;

    // Verifica si hay filas en la tabla
    if (model.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "La tabla está vacía.");
        return; // Salir si no hay datos
    }

    // Crear un mapa para guardar los nombres y sus rutas
    Map<String, List<String[]>> archivos = new HashMap<>();

    // Recopilar las rutas de los archivos
    for (int i = 0; i < model.getRowCount(); i++) {
        nombreArchivo = (String) model.getValueAt(i, 0); // Nombre en la columna 0
        rutaArchivo = (String) model.getValueAt(i, 2); // Ruta en la columna 2

        // Normalizamos el nombre de archivo
        if (nombreArchivo != null && !nombreArchivo.trim().isEmpty() && rutaArchivo != null && !rutaArchivo.trim().isEmpty()) {
            nombreArchivo = nombreArchivo.trim().toLowerCase(); // Normaliza a minúsculas
            rutaArchivo = rutaArchivo.trim();

            // Agregar la ruta al mapa
            archivos.putIfAbsent(nombreArchivo, new ArrayList<>());
            archivos.get(nombreArchivo).add(new String[] {
                (String) model.getValueAt(i, 0), // Nombre
                (String) model.getValueAt(i, 1), // Extensión
                (String) model.getValueAt(i, 2), // Ruta
                (String) model.getValueAt(i, 3), // Fecha de creación
                (String) model.getValueAt(i, 4), // Fecha de modificación
                (String) model.getValueAt(i, 5), // Tamaño
                (String) model.getValueAt(i, 6), // Nombre del aparato
                (String) model.getValueAt(i, 7), // Modelo del aparato
            });
        }
    }
    
    // Lista para almacenar los duplicados
    List<String[]> archivosDuplicados = new ArrayList<>();
    for (Map.Entry<String, List<String[]>> entry : archivos.entrySet()) {
        if (entry.getValue().size() > 1) { // Si hay más de un archivo con el mismo nombre
            archivosDuplicados.addAll(entry.getValue()); // Añadir todos los duplicados a la lista
        }
    }
    
    model.setRowCount(0); // Limpiar todas las filas del JTable
    // Agregar los archivos duplicados al modelo de la tabla
    if (archivosDuplicados.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No se encontraron archivos duplicados.");
    } else {
        for (int i = 0; i < archivosDuplicados.size(); i++) { // Usando for tradicional
            String[] archivo = archivosDuplicados.get(i); // Obtener cada archivo duplicado
            model.addRow(archivo); // Agregar cada fila de archivo duplicado a la tabla
        }
        JOptionPane.showMessageDialog(this, "Se encontraron " + archivosDuplicados.size() + " archivos duplicados.");
    }
    }//GEN-LAST:event_abrirDuplicadoActionPerformed

    private void mostrarArchivosMasGrandes2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarArchivosMasGrandes2ActionPerformed
    List<File> archivosGrandes = new ArrayList<>();

    // Recoger archivos existentes a partir de datos originales
    for (int i = 0; i < datosOriginales.size(); i++) {
        String[] fila = datosOriginales.get(i); // Obtener cada fila
        File file = new File(fila[2]); // La ruta está en la posición 2
        if (file.exists()) {
            archivosGrandes.add(file);
        }
    }

    // Ordenar los archivos por tamaño de forma descendente
    archivosGrandes.sort((f1, f2) -> Long.compare(f2.length(), f1.length()));

    // Limitar a los primeros 10 archivos
    List<File> top10Archivos = archivosGrandes.stream().limit(10).collect(Collectors.toList());

    // Actualizar la tabla con los archivos más grandes
    DefaultTableModel model = new DefaultTableModel(new String[]{
        "Nombre del archivo", "Extensión del archivo", "Ruta del Archivo", 
        "Fecha de creación", "Fecha de modificación", "Tamaño MB", 
        "Nombre del aparato", "Modelo del aparato"}, 0);
    
    for (int i = 0; i < top10Archivos.size(); i++) {
        File file = top10Archivos.get(i);
        String[] filaCorrespondiente = null;

    // Buscar la fila correspondiente en datosOriginales para obtener información adicional
    for (int j = 0; j < datosOriginales.size(); j++) {
        String[] fila = datosOriginales.get(j);
        if (fila[2].equals(file.getAbsolutePath())) {
            filaCorrespondiente = fila; // Guardar la fila correspondiente
            break;
        }
    }

    if (filaCorrespondiente != null) {
        String nombre = filaCorrespondiente[0]; // Nombre del archivo
        String extension = filaCorrespondiente[1]; // Extensión
        String ruta = filaCorrespondiente[2]; // Ruta
        String fechaCreacion = filaCorrespondiente[3]; // Fecha de creación
        String fechaModificacion = filaCorrespondiente[4]; // Fecha de modificación
        double tamañoMB = file.length() / (1024.0 * 1024.0); // Tamaño en MB
        String nombreAparato = filaCorrespondiente[6]; // Nombre del aparato
        String modeloAparato = filaCorrespondiente[7]; // Modelo del aparato

        // Agregar fila al modelo de la tabla
        String[] filaTabla = new String[]{
            nombre, extension, ruta, fechaCreacion, 
            fechaModificacion, String.format("%.2f", tamañoMB), 
            nombreAparato, modeloAparato
        };
        model.addRow(filaTabla);
    }
}

    // Actualizar el JTable con el nuevo modelo
    JTableMenu.setModel(model);
    }//GEN-LAST:event_mostrarArchivosMasGrandes2ActionPerformed

    private void moverImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moverImagenActionPerformed
    int filaSeleccionada = JTableMenu.getSelectedRow(); // Obtener la fila seleccionada
    
    // Verificar si se seleccionó una fila
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Por favor, selecciona una imagen de la tabla.");
        return; // Salir si no hay selección
    }
    
    // Obtener la ruta del archivo de la columna correspondiente (en este caso, la columna 2)
    String rutaImagen = (String) JTableMenu.getValueAt(filaSeleccionada, 2); // La columna de la ruta es la 2

    System.out.println("Ruta de la imagen: " + rutaImagen); // Mensaje de depuración
    
    // Crear un objeto File para la imagen seleccionada
    File imagenSeleccionada = new File(rutaImagen);
    
    // Verificar si el archivo existe
    if (!imagenSeleccionada.exists()) {
        JOptionPane.showMessageDialog(this, "La imagen seleccionada no existe en la ruta: " + rutaImagen);
        return;
    }
    
    // Mostrar un JFileChooser para seleccionar la carpeta de destino
    JFileChooser carpetaChooser = new JFileChooser();
    carpetaChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    int resultadoCarpeta = carpetaChooser.showOpenDialog(this);
    
    // Si se selecciona una carpeta
    if (resultadoCarpeta == JFileChooser.APPROVE_OPTION) {
        File carpetaDestino = carpetaChooser.getSelectedFile();
        File imagenDestino = new File(carpetaDestino, imagenSeleccionada.getName());
        
        // Verificar si el archivo destino ya existe
        if (imagenDestino.exists()) {
            JOptionPane.showMessageDialog(this, "Ya existe una imagen con el mismo nombre en la carpeta de destino.");
            return;
        }
        
        // Mover la imagen
        try {
            Files.move(imagenSeleccionada.toPath(), imagenDestino.toPath());
            JOptionPane.showMessageDialog(this, "Imagen movida con éxito a: " + imagenDestino.getAbsolutePath());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al mover la imagen: " + e.getMessage());
        }
    }    
    }//GEN-LAST:event_moverImagenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(imagenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(imagenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(imagenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(imagenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new imagenes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTableMenu;
    private javax.swing.JButton abrir;
    private javax.swing.JButton abrirDuplicado;
    private javax.swing.JButton atras;
    private javax.swing.JButton atras1;
    private javax.swing.JButton buscar;
    private javax.swing.JButton eliminar;
    private javax.swing.JButton imagenes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextFieldBusqueda;
    private javax.swing.JButton mostrarArchivosMasGrandes2;
    private javax.swing.JLabel mostrarImagen;
    private javax.swing.JButton moverImagen;
    private javax.swing.JButton tamañototal;
    // End of variables declaration//GEN-END:variables

}
